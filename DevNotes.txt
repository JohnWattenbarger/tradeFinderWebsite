Possible improvements:
 > Change number of players option to a dropdown with 1-3
 > Have multiple player trades that are lopsided (3 - 1 or something)
 > Add filter to exclude some teams
 > Add sorting options (sort by best overall gain, best for my team, etc.)
 > Trade view overview:
   > Instead of letting players set all these parameters, just find the best trades in the background for then
   > Rate the trades from 0-5 stars
     > Could have an overall star rating, and then expandable to show parts that make it up
     > Based on: 
       - how much teams improve (+2,000 for each is a 5 star)
       - how much your team improves
       - difference between value given up
       - likelyhood of being accepted
 > For multiple player trades, allow clicking to disable the player from the trade (preview what would change if a player were removed)
 > Add a max difference between team improvements (so I don't gain 1000 points but the other guy gains 10000 points)
 > Add a "Favorite" button to save trades I like
 > Make it possible to hide/include trades only involving certain teams
   > Like hide trades involving Jared's team
   > Make teams collapsible
 > Add different trade calculators
   > Trades b/w 2 teams, trades for a certain player, etc.
 > Fix loading screen
 > Fix error handling
 > Save API'S for mock data and testing later
 > Look into why app freezes up when inputs are changed
   > Are they recalculating the trades??
 > Add async trade finder logic
 > Show loading symbol
 > Test other leagues
 > Allow users to choose different sources for player values
   > Maybe with modifiers like bump QBs by 1.5x points, rank non starters 0, or something
 > Use a framework for graphics?
 > Add an LLM assistant to explain trades?? (probably not worth the effort)


Before going public:
 > Make repo private
 > Get a real domain name
 > Really polish UI & UX
   > Look at how games and sites display trades to make sure this site UI stacks up
 > Add examples of how to best use the site
 > Change hosting
   > Make sure it can support lots of traffic and requests
   > Might need to cache requests in the browser or server?
     > Could cache player rankings periodically
 > Consider moving frontend logic to backend??
   > This would hide API requests from users
 > Consider if CORS needs to be accounted for?
   > Am I protected from DDOS?



Thoughts:
 > Manually create leagues
   > Use the league (ESPN) API to get teams and rosters
   > Use FantasyCalc API to get player values
     > The generalized rankings look I can do ((value + 5) * 100) to get close to league values
   > Construct a simplified league  -->  League { Teams[]: { Players[]: ID, name, value, position }}
